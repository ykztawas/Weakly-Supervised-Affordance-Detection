# VGG 16-layer network convolutional finetuning
# Network modified to have smaller receptive field (128 pixels)
# and smaller stride (8 pixels) when run in convolutional mode.
#
# In this model we also change max pooling size in the first 4 layer
# from 2 to 3 while retaining stride = 2
# which makes it easier to exactly align responses at different layer.
#
# For alignment to work, we set (we choose 32x so as to be able to evaluate
# the model for all different subsampling sizes):
# (1) input dimension equal to
# $n = 32 * k - 31$, e.g., 321 (for k = 11)
# Dimension after pooling w. subsampling:
# (16 * k - 15); (8 * k - 7); (4 * k - 3); (2 * k - 1); (k).
# For k = 11, these translate to
#           161;          81;          41;          21;  11
# 

name: "deepLab-SigmoidLayer"

layer {
  name: "data"
  type: "ImageSegData"
  top: "data"
  top: "label"
  image_data_param {
    root_folder: YOUR_PATH_TO_CAD/CAD_release/
    source: YOUR_PATH_TO_DEEPLABV2_EXTENSION/deeplabv2_extension/exper/CAD/lists/train_object_split_strong.txt
#for actor split choose
#    source: YOUR_PATH_TO_DEEPLABV2_EXTENSION/deeplabv2_extension/exper/CAD/lists/train_actor_split_strong.txt
#for weak object split choose
#    source: YOUR_PATH_TO_DEEPLABV2_EXTENSION/deeplabv2_extension/exper/CAD/lists/train_object_split_weak.txt
#for weak actor split choose
#    source: YOUR_PATH_TO_DEEPLABV2_EXTENSION/deeplabv2_extension/exper/CAD/lists/train_actor_split_weak.txt
    label_type: MATPIXEL
    batch_size: 3
    shuffle: true
  }
  transform_param {
    mean_value: 104.008
    mean_value: 116.669
    mean_value: 122.675
#    crop_size: 241
    mirror: true
  }
  include: { phase: TRAIN }
}

### NETWORK ###

layer {
  bottom: "data"
  top: "conv1_1"
  name: "conv1_1"
  type: "Convolution"
  param {
        lr_mult: 1
        decay_mult: 1
  }
  param {
        lr_mult: 2
        decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv1_1"
  top: "conv1_1"
  name: "relu1_1"
  type: "ReLU"
}
layer {
  bottom: "conv1_1"
  top: "conv1_2"
  name: "conv1_2"
  type: "Convolution"
  param {
        lr_mult: 1
        decay_mult: 1
  }
  param {
        lr_mult: 2
        decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv1_2"
  top: "conv1_2"
  name: "relu1_2"
  type: "ReLU"
}
layer {
  bottom: "conv1_2"
  top: "pool1"
  name: "pool1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
    pad: 1
  }
}
layer {
  bottom: "pool1"
  top: "conv2_1"
  name: "conv2_1"
  type: "Convolution"
  param {
        lr_mult: 1
        decay_mult: 1
  }
  param {
        lr_mult: 2
        decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv2_1"
  top: "conv2_1"
  name: "relu2_1"
  type: "ReLU"
}
layer {
  bottom: "conv2_1"
  top: "conv2_2"
  name: "conv2_2"
  type: "Convolution"
  param {
        lr_mult: 1
        decay_mult: 1
  }
  param {
        lr_mult: 2
        decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv2_2"
  top: "conv2_2"
  name: "relu2_2"
  type: "ReLU"
}
layer {
  bottom: "conv2_2"
  top: "pool2"
  name: "pool2"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
    pad: 1
  }
}
layer {
  bottom: "pool2"
  top: "conv3_1"
  name: "conv3_1"
  type: "Convolution"
  param {
        lr_mult: 1
        decay_mult: 1
  }
  param {
        lr_mult: 2
        decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3_1"
  top: "conv3_1"
  name: "relu3_1"
  type: "ReLU"
}
layer {
  bottom: "conv3_1"
  top: "conv3_2"
  name: "conv3_2"
  type: "Convolution"
  param {
        lr_mult: 1
        decay_mult: 1
  }
  param {
        lr_mult: 2
        decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3_2"
  top: "conv3_2"
  name: "relu3_2"
  type: "ReLU"
}
layer {
  bottom: "conv3_2"
  top: "conv3_3"
  name: "conv3_3"
  type: "Convolution"
  param {
        lr_mult: 1
        decay_mult: 1
  }
  param {
        lr_mult: 2
        decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3_3"
  top: "conv3_3"
  name: "relu3_3"
  type: "ReLU"
}
layer {
  bottom: "conv3_3"
  top: "pool3"
  name: "pool3"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
    pad: 1
  }
}
layer {
  bottom: "pool3"
  top: "conv4_1"
  name: "conv4_1"
  type: "Convolution"
  param {
        lr_mult: 1
        decay_mult: 1
  }
  param {
        lr_mult: 2
        decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_1"
  top: "conv4_1"
  name: "relu4_1"
  type: "ReLU"
}
layer {
  bottom: "conv4_1"
  top: "conv4_2"
  name: "conv4_2"
  type: "Convolution"
  param {
        lr_mult: 1
        decay_mult: 1
  }
  param {
        lr_mult: 2
        decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_2"
  top: "conv4_2"
  name: "relu4_2"
  type: "ReLU"
}
layer {
  bottom: "conv4_2"
  top: "conv4_3"
  name: "conv4_3"
  type: "Convolution"
  param {
        lr_mult: 1
        decay_mult: 1
  }
  param {
        lr_mult: 2
        decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_3"
  top: "conv4_3"
  name: "relu4_3"
  type: "ReLU"
}
layer {
  bottom: "conv4_3"
  top: "pool4"
  name: "pool4"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    pad: 1
    stride: 1
  }
}
layer {
  bottom: "pool4"
  top: "conv5_1"
  name: "conv5_1"
  type: "Convolution"
  param {
        lr_mult: 1
        decay_mult: 1
  }
  param {
        lr_mult: 2
        decay_mult: 0
  }
  convolution_param {
    num_output: 512
    #pad: 1
    pad: 2
    dilation: 2
    kernel_size: 3
  }
}
layer {
  bottom: "conv5_1"
  top: "conv5_1"
  name: "relu5_1"
  type: "ReLU"
}
layer {
  bottom: "conv5_1"
  top: "conv5_2"
  name: "conv5_2"
  type: "Convolution"
  param {
        lr_mult: 1
        decay_mult: 1
  }
  param {
        lr_mult: 2
        decay_mult: 0
  }
  convolution_param {
    num_output: 512
    #pad: 1
    pad: 2
    dilation: 2
    kernel_size: 3
  }
}
layer {
  bottom: "conv5_2"
  top: "conv5_2"
  name: "relu5_2"
  type: "ReLU"
}
layer {
  bottom: "conv5_2"
  top: "conv5_3"
  name: "conv5_3"
  type: "Convolution"
  param {
        lr_mult: 1
        decay_mult: 1
  }
  param {
        lr_mult: 2
        decay_mult: 0
  }
  convolution_param {
    num_output: 512
    #pad: 1
    pad: 2
    dilation: 2
    kernel_size: 3
  }
}
layer {
  bottom: "conv5_3"
  top: "conv5_3"
  name: "relu5_3"
  type: "ReLU"
}
layer {
  bottom: "conv5_3"
  top: "pool5"
  name: "pool5"
  type: "Pooling"
  pooling_param {
    pool: MAX
    #kernel_size: 2
    #stride: 2
    kernel_size: 3
    stride: 1
    pad: 1
  }
}

layer {
  bottom: "pool5"
  top: "pool5a"
  name: "pool5a"
  type: "Pooling"
  pooling_param {
    pool: AVE
    kernel_size: 3
    stride: 1
    pad: 1
  }
}

layer {
  bottom: "pool5a"
  top: "fc6"
  name: "fc6"
  type: "Convolution"
#  strict_dim: false
  param {
        lr_mult: 1
        decay_mult: 1
  }
  param {
        lr_mult: 2
        decay_mult: 0
  }
  convolution_param {
    num_output: 1024
    pad: 12
    dilation: 12
    kernel_size: 3
  }
}
layer {
  bottom: "fc6"
  top: "fc6"
  name: "relu6"
  type: "ReLU"
}
layer {
  bottom: "fc6"
  top: "fc6"
  name: "drop6"
  type: "Dropout"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  bottom: "label"
  top: "label_shrink"
  name: "label_shrink"
  type: "Interp"
  interp_param {
    shrink_factor: 8
    pad_beg: 0
    pad_end: 0
  }
}
#layer {
#  name: "label_sum"
#  type: "Convolution"
#  bottom: "label_shrink"
#  top: "label_sum"
#  blobs_lr: 0
#  convolution_param {
#    num_output: 1
#    bias_term: false
#    kernel_size: 1
#    weight_filler {
#      type: 'constant'
#      value: 1
#    }
#  }
#}

#layer {
#  name: "sum_threshold"
#  bottom: "label_sum"
#  type: THRESHOLD
#  top: "label_sum"
#  threshold_param {
#  	threshold: 0
#  }
#}
#layer {
#  bottom: "fc6"
#  bottom: "label_sum"
#  top: "fc6"
#  name: "drop_binary"
#  type: BINARY_LABEL_DROPOUT
#}
layer {
  bottom: "fc6"
  top: "fc7"
  name: "fc7"
  type: "Convolution"
#  strict_dim: false
  param {
        lr_mult: 1
        decay_mult: 1
  }
  param {
        lr_mult: 2
        decay_mult: 0
  }
  convolution_param {
    num_output: 1024
    kernel_size: 1
  }
}
layer {
  bottom: "fc7"
  top: "fc7"
  name: "relu7"
  type: "ReLU"
}
layer {
  bottom: "fc7"
  top: "fc7"
  name: "drop7"
  type: "Dropout"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  bottom: "fc7"
  top: "fc8"
  name: "fc8"
  type: "Convolution"
#  strict_dim: false
  param {
        lr_mult: 10
        decay_mult: 1
  }
  param {
        lr_mult: 20
        decay_mult: 0
  }
  convolution_param {
    num_output: 6
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
#       type: "constant"
#       value: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss"
  type: "SigmoidCrossEntropyLoss"
  bottom: "fc8"
  bottom: "label_shrink"
  loss_param{
     ignore_label: 255
  }
  include: { phase: TRAIN }
}
#layer {
#  name: "loss"
#  type: "SigmoidCrossEntropyLossIoU"
#  bottom: "fc8"
#  bottom: "label_shrink"
#  loss_param{
#     tau: 1.0
#     decay: 0.001
#     kappa: 0.1
#     version: 2
#  }
#  include: { phase: TRAIN }
#}
#layer {
#  name: "loss"
#  type: SOFTMAX_LOSS
#  bottom: "fc8"
#  bottom: "label_shrink"
#  softmaxloss_param {
#    weight_source: "/home/sawatzky/libs/deeplab_for_johann/exper/cad120-affordances/loss_weight/loss_weight_train.txt"
#    ignore_label: 255
#  }
#  include: { phase: TRAIN }
#}
#layer {
#  name: "accuracy"
#  type: SEG_ACCURACY
#  bottom: "fc8"
#  bottom: "label_shrink"
#  top: "accuracy"
#  seg_accuracy_param {
#    ignore_label: 255
#  } 
#}
